// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	core "autopilot/backends/internal/core"

	chi "github.com/go-chi/chi/v5"

	mock "github.com/stretchr/testify/mock"
)

// MockMailer is an autogenerated mock type for the Mailer type
type MockMailer struct {
	mock.Mock
}

type MockMailer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailer) EXPECT() *MockMailer_Expecter {
	return &MockMailer_Expecter{mock: &_m.Mock}
}

// BulkSend provides a mock function with given fields: templateName, messages, opts
func (_m *MockMailer) BulkSend(templateName string, messages []core.EmailMessage, opts *core.RenderOptions) error {
	ret := _m.Called(templateName, messages, opts)

	if len(ret) == 0 {
		panic("no return value specified for BulkSend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []core.EmailMessage, *core.RenderOptions) error); ok {
		r0 = rf(templateName, messages, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMailer_BulkSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkSend'
type MockMailer_BulkSend_Call struct {
	*mock.Call
}

// BulkSend is a helper method to define mock.On call
//   - templateName string
//   - messages []core.EmailMessage
//   - opts *core.RenderOptions
func (_e *MockMailer_Expecter) BulkSend(templateName interface{}, messages interface{}, opts interface{}) *MockMailer_BulkSend_Call {
	return &MockMailer_BulkSend_Call{Call: _e.mock.On("BulkSend", templateName, messages, opts)}
}

func (_c *MockMailer_BulkSend_Call) Run(run func(templateName string, messages []core.EmailMessage, opts *core.RenderOptions)) *MockMailer_BulkSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]core.EmailMessage), args[2].(*core.RenderOptions))
	})
	return _c
}

func (_c *MockMailer_BulkSend_Call) Return(_a0 error) *MockMailer_BulkSend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMailer_BulkSend_Call) RunAndReturn(run func(string, []core.EmailMessage, *core.RenderOptions) error) *MockMailer_BulkSend_Call {
	_c.Call.Return(run)
	return _c
}

// Render provides a mock function with given fields: templateName, data, opts
func (_m *MockMailer) Render(templateName string, data map[string]any, opts *core.RenderOptions) (string, string, error) {
	ret := _m.Called(templateName, data, opts)

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, map[string]any, *core.RenderOptions) (string, string, error)); ok {
		return rf(templateName, data, opts)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]any, *core.RenderOptions) string); ok {
		r0 = rf(templateName, data, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, map[string]any, *core.RenderOptions) string); ok {
		r1 = rf(templateName, data, opts)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, map[string]any, *core.RenderOptions) error); ok {
		r2 = rf(templateName, data, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMailer_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type MockMailer_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - templateName string
//   - data map[string]any
//   - opts *core.RenderOptions
func (_e *MockMailer_Expecter) Render(templateName interface{}, data interface{}, opts interface{}) *MockMailer_Render_Call {
	return &MockMailer_Render_Call{Call: _e.mock.On("Render", templateName, data, opts)}
}

func (_c *MockMailer_Render_Call) Run(run func(templateName string, data map[string]any, opts *core.RenderOptions)) *MockMailer_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]any), args[2].(*core.RenderOptions))
	})
	return _c
}

func (_c *MockMailer_Render_Call) Return(html string, text string, err error) *MockMailer_Render_Call {
	_c.Call.Return(html, text, err)
	return _c
}

func (_c *MockMailer_Render_Call) RunAndReturn(run func(string, map[string]any, *core.RenderOptions) (string, string, error)) *MockMailer_Render_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: templateName, msg, opts
func (_m *MockMailer) Send(templateName string, msg core.EmailMessage, opts *core.RenderOptions) error {
	ret := _m.Called(templateName, msg, opts)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, core.EmailMessage, *core.RenderOptions) error); ok {
		r0 = rf(templateName, msg, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMailer_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockMailer_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - templateName string
//   - msg core.EmailMessage
//   - opts *core.RenderOptions
func (_e *MockMailer_Expecter) Send(templateName interface{}, msg interface{}, opts interface{}) *MockMailer_Send_Call {
	return &MockMailer_Send_Call{Call: _e.mock.On("Send", templateName, msg, opts)}
}

func (_c *MockMailer_Send_Call) Run(run func(templateName string, msg core.EmailMessage, opts *core.RenderOptions)) *MockMailer_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(core.EmailMessage), args[2].(*core.RenderOptions))
	})
	return _c
}

func (_c *MockMailer_Send_Call) Return(_a0 error) *MockMailer_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMailer_Send_Call) RunAndReturn(run func(string, core.EmailMessage, *core.RenderOptions) error) *MockMailer_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SetupPreviewRoutes provides a mock function with given fields: router
func (_m *MockMailer) SetupPreviewRoutes(router chi.Router) {
	_m.Called(router)
}

// MockMailer_SetupPreviewRoutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupPreviewRoutes'
type MockMailer_SetupPreviewRoutes_Call struct {
	*mock.Call
}

// SetupPreviewRoutes is a helper method to define mock.On call
//   - router chi.Router
func (_e *MockMailer_Expecter) SetupPreviewRoutes(router interface{}) *MockMailer_SetupPreviewRoutes_Call {
	return &MockMailer_SetupPreviewRoutes_Call{Call: _e.mock.On("SetupPreviewRoutes", router)}
}

func (_c *MockMailer_SetupPreviewRoutes_Call) Run(run func(router chi.Router)) *MockMailer_SetupPreviewRoutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chi.Router))
	})
	return _c
}

func (_c *MockMailer_SetupPreviewRoutes_Call) Return() *MockMailer_SetupPreviewRoutes_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMailer_SetupPreviewRoutes_Call) RunAndReturn(run func(chi.Router)) *MockMailer_SetupPreviewRoutes_Call {
	_c.Run(run)
	return _c
}

// TemplateOptions provides a mock function with no fields
func (_m *MockMailer) TemplateOptions() *core.MailTemplateOptions {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TemplateOptions")
	}

	var r0 *core.MailTemplateOptions
	if rf, ok := ret.Get(0).(func() *core.MailTemplateOptions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.MailTemplateOptions)
		}
	}

	return r0
}

// MockMailer_TemplateOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TemplateOptions'
type MockMailer_TemplateOptions_Call struct {
	*mock.Call
}

// TemplateOptions is a helper method to define mock.On call
func (_e *MockMailer_Expecter) TemplateOptions() *MockMailer_TemplateOptions_Call {
	return &MockMailer_TemplateOptions_Call{Call: _e.mock.On("TemplateOptions")}
}

func (_c *MockMailer_TemplateOptions_Call) Run(run func()) *MockMailer_TemplateOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMailer_TemplateOptions_Call) Return(_a0 *core.MailTemplateOptions) *MockMailer_TemplateOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMailer_TemplateOptions_Call) RunAndReturn(run func() *core.MailTemplateOptions) *MockMailer_TemplateOptions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMailer creates a new instance of MockMailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailer {
	mock := &MockMailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
