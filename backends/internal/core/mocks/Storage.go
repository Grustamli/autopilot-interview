// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	core "autopilot/backends/internal/core"
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, key
func (_m *MockStorage) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStorage_Expecter) Delete(ctx interface{}, key interface{}) *MockStorage_Delete_Call {
	return &MockStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockStorage_Delete_Call) Run(run func(ctx context.Context, key string)) *MockStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_Delete_Call) Return(_a0 error) *MockStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function with given fields: ctx, key
func (_m *MockStorage) Download(ctx context.Context, key string) (io.ReadCloser, *core.ObjectMetadata, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 io.ReadCloser
	var r1 *core.ObjectMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, *core.ObjectMetadata, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *core.ObjectMetadata); ok {
		r1 = rf(ctx, key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.ObjectMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockStorage_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockStorage_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStorage_Expecter) Download(ctx interface{}, key interface{}) *MockStorage_Download_Call {
	return &MockStorage_Download_Call{Call: _e.mock.On("Download", ctx, key)}
}

func (_c *MockStorage_Download_Call) Run(run func(ctx context.Context, key string)) *MockStorage_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_Download_Call) Return(_a0 io.ReadCloser, _a1 *core.ObjectMetadata, _a2 error) *MockStorage_Download_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockStorage_Download_Call) RunAndReturn(run func(context.Context, string) (io.ReadCloser, *core.ObjectMetadata, error)) *MockStorage_Download_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateDownloadURL provides a mock function with given fields: ctx, key, expiresIn
func (_m *MockStorage) GenerateDownloadURL(ctx context.Context, key string, expiresIn time.Duration) (*core.DownloadInfo, error) {
	ret := _m.Called(ctx, key, expiresIn)

	if len(ret) == 0 {
		panic("no return value specified for GenerateDownloadURL")
	}

	var r0 *core.DownloadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (*core.DownloadInfo, error)); ok {
		return rf(ctx, key, expiresIn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *core.DownloadInfo); ok {
		r0 = rf(ctx, key, expiresIn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.DownloadInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, key, expiresIn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GenerateDownloadURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateDownloadURL'
type MockStorage_GenerateDownloadURL_Call struct {
	*mock.Call
}

// GenerateDownloadURL is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiresIn time.Duration
func (_e *MockStorage_Expecter) GenerateDownloadURL(ctx interface{}, key interface{}, expiresIn interface{}) *MockStorage_GenerateDownloadURL_Call {
	return &MockStorage_GenerateDownloadURL_Call{Call: _e.mock.On("GenerateDownloadURL", ctx, key, expiresIn)}
}

func (_c *MockStorage_GenerateDownloadURL_Call) Run(run func(ctx context.Context, key string, expiresIn time.Duration)) *MockStorage_GenerateDownloadURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockStorage_GenerateDownloadURL_Call) Return(_a0 *core.DownloadInfo, _a1 error) *MockStorage_GenerateDownloadURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GenerateDownloadURL_Call) RunAndReturn(run func(context.Context, string, time.Duration) (*core.DownloadInfo, error)) *MockStorage_GenerateDownloadURL_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateUploadURL provides a mock function with given fields: ctx, key, contentType, expiresIn
func (_m *MockStorage) GenerateUploadURL(ctx context.Context, key string, contentType string, expiresIn time.Duration) (*core.UploadInfo, error) {
	ret := _m.Called(ctx, key, contentType, expiresIn)

	if len(ret) == 0 {
		panic("no return value specified for GenerateUploadURL")
	}

	var r0 *core.UploadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) (*core.UploadInfo, error)); ok {
		return rf(ctx, key, contentType, expiresIn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) *core.UploadInfo); ok {
		r0 = rf(ctx, key, contentType, expiresIn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.UploadInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Duration) error); ok {
		r1 = rf(ctx, key, contentType, expiresIn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GenerateUploadURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateUploadURL'
type MockStorage_GenerateUploadURL_Call struct {
	*mock.Call
}

// GenerateUploadURL is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - contentType string
//   - expiresIn time.Duration
func (_e *MockStorage_Expecter) GenerateUploadURL(ctx interface{}, key interface{}, contentType interface{}, expiresIn interface{}) *MockStorage_GenerateUploadURL_Call {
	return &MockStorage_GenerateUploadURL_Call{Call: _e.mock.On("GenerateUploadURL", ctx, key, contentType, expiresIn)}
}

func (_c *MockStorage_GenerateUploadURL_Call) Run(run func(ctx context.Context, key string, contentType string, expiresIn time.Duration)) *MockStorage_GenerateUploadURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockStorage_GenerateUploadURL_Call) Return(_a0 *core.UploadInfo, _a1 error) *MockStorage_GenerateUploadURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GenerateUploadURL_Call) RunAndReturn(run func(context.Context, string, string, time.Duration) (*core.UploadInfo, error)) *MockStorage_GenerateUploadURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadata provides a mock function with given fields: ctx, key
func (_m *MockStorage) GetMetadata(ctx context.Context, key string) (*core.ObjectMetadata, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 *core.ObjectMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*core.ObjectMetadata, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *core.ObjectMetadata); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ObjectMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadata'
type MockStorage_GetMetadata_Call struct {
	*mock.Call
}

// GetMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStorage_Expecter) GetMetadata(ctx interface{}, key interface{}) *MockStorage_GetMetadata_Call {
	return &MockStorage_GetMetadata_Call{Call: _e.mock.On("GetMetadata", ctx, key)}
}

func (_c *MockStorage_GetMetadata_Call) Run(run func(ctx context.Context, key string)) *MockStorage_GetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_GetMetadata_Call) Return(_a0 *core.ObjectMetadata, _a1 error) *MockStorage_GetMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetMetadata_Call) RunAndReturn(run func(context.Context, string) (*core.ObjectMetadata, error)) *MockStorage_GetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, prefix
func (_m *MockStorage) List(ctx context.Context, prefix string) ([]*core.ObjectMetadata, error) {
	ret := _m.Called(ctx, prefix)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*core.ObjectMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*core.ObjectMetadata, error)); ok {
		return rf(ctx, prefix)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*core.ObjectMetadata); ok {
		r0 = rf(ctx, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*core.ObjectMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockStorage_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
func (_e *MockStorage_Expecter) List(ctx interface{}, prefix interface{}) *MockStorage_List_Call {
	return &MockStorage_List_Call{Call: _e.mock.On("List", ctx, prefix)}
}

func (_c *MockStorage_List_Call) Run(run func(ctx context.Context, prefix string)) *MockStorage_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_List_Call) Return(_a0 []*core.ObjectMetadata, _a1 error) *MockStorage_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_List_Call) RunAndReturn(run func(context.Context, string) ([]*core.ObjectMetadata, error)) *MockStorage_List_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMetadata provides a mock function with given fields: ctx, key, metadata
func (_m *MockStorage) UpdateMetadata(ctx context.Context, key string, metadata *core.ObjectMetadata) error {
	ret := _m.Called(ctx, key, metadata)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *core.ObjectMetadata) error); ok {
		r0 = rf(ctx, key, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_UpdateMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetadata'
type MockStorage_UpdateMetadata_Call struct {
	*mock.Call
}

// UpdateMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - metadata *core.ObjectMetadata
func (_e *MockStorage_Expecter) UpdateMetadata(ctx interface{}, key interface{}, metadata interface{}) *MockStorage_UpdateMetadata_Call {
	return &MockStorage_UpdateMetadata_Call{Call: _e.mock.On("UpdateMetadata", ctx, key, metadata)}
}

func (_c *MockStorage_UpdateMetadata_Call) Run(run func(ctx context.Context, key string, metadata *core.ObjectMetadata)) *MockStorage_UpdateMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*core.ObjectMetadata))
	})
	return _c
}

func (_c *MockStorage_UpdateMetadata_Call) Return(_a0 error) *MockStorage_UpdateMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_UpdateMetadata_Call) RunAndReturn(run func(context.Context, string, *core.ObjectMetadata) error) *MockStorage_UpdateMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: ctx, key, reader, metadata
func (_m *MockStorage) Upload(ctx context.Context, key string, reader io.Reader, metadata *core.ObjectMetadata) (*core.ObjectMetadata, error) {
	ret := _m.Called(ctx, key, reader, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 *core.ObjectMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, *core.ObjectMetadata) (*core.ObjectMetadata, error)); ok {
		return rf(ctx, key, reader, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, *core.ObjectMetadata) *core.ObjectMetadata); ok {
		r0 = rf(ctx, key, reader, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ObjectMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, *core.ObjectMetadata) error); ok {
		r1 = rf(ctx, key, reader, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockStorage_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - reader io.Reader
//   - metadata *core.ObjectMetadata
func (_e *MockStorage_Expecter) Upload(ctx interface{}, key interface{}, reader interface{}, metadata interface{}) *MockStorage_Upload_Call {
	return &MockStorage_Upload_Call{Call: _e.mock.On("Upload", ctx, key, reader, metadata)}
}

func (_c *MockStorage_Upload_Call) Run(run func(ctx context.Context, key string, reader io.Reader, metadata *core.ObjectMetadata)) *MockStorage_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), args[3].(*core.ObjectMetadata))
	})
	return _c
}

func (_c *MockStorage_Upload_Call) Return(_a0 *core.ObjectMetadata, _a1 error) *MockStorage_Upload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_Upload_Call) RunAndReturn(run func(context.Context, string, io.Reader, *core.ObjectMetadata) (*core.ObjectMetadata, error)) *MockStorage_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
