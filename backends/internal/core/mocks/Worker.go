// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"

	pgxpool "github.com/jackc/pgx/v5/pgxpool"

	river "github.com/riverqueue/river"

	rivertype "github.com/riverqueue/river/rivertype"
)

// MockWorker is an autogenerated mock type for the Worker type
type MockWorker struct {
	mock.Mock
}

type MockWorker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorker) EXPECT() *MockWorker_Expecter {
	return &MockWorker_Expecter{mock: &_m.Mock}
}

// GetClient provides a mock function with no fields
func (_m *MockWorker) GetClient() *river.Client[pgx.Tx] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 *river.Client[pgx.Tx]
	if rf, ok := ret.Get(0).(func() *river.Client[pgx.Tx]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*river.Client[pgx.Tx])
		}
	}

	return r0
}

// MockWorker_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockWorker_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
func (_e *MockWorker_Expecter) GetClient() *MockWorker_GetClient_Call {
	return &MockWorker_GetClient_Call{Call: _e.mock.On("GetClient")}
}

func (_c *MockWorker_GetClient_Call) Run(run func()) *MockWorker_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorker_GetClient_Call) Return(_a0 *river.Client[pgx.Tx]) *MockWorker_GetClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorker_GetClient_Call) RunAndReturn(run func() *river.Client[pgx.Tx]) *MockWorker_GetClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetDbPool provides a mock function with no fields
func (_m *MockWorker) GetDbPool() *pgxpool.Pool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDbPool")
	}

	var r0 *pgxpool.Pool
	if rf, ok := ret.Get(0).(func() *pgxpool.Pool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgxpool.Pool)
		}
	}

	return r0
}

// MockWorker_GetDbPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDbPool'
type MockWorker_GetDbPool_Call struct {
	*mock.Call
}

// GetDbPool is a helper method to define mock.On call
func (_e *MockWorker_Expecter) GetDbPool() *MockWorker_GetDbPool_Call {
	return &MockWorker_GetDbPool_Call{Call: _e.mock.On("GetDbPool")}
}

func (_c *MockWorker_GetDbPool_Call) Run(run func()) *MockWorker_GetDbPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorker_GetDbPool_Call) Return(_a0 *pgxpool.Pool) *MockWorker_GetDbPool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorker_GetDbPool_Call) RunAndReturn(run func() *pgxpool.Pool) *MockWorker_GetDbPool_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, args, opts
func (_m *MockWorker) Insert(ctx context.Context, args river.JobArgs, opts *river.InsertOpts) (*rivertype.JobInsertResult, error) {
	ret := _m.Called(ctx, args, opts)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *rivertype.JobInsertResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, river.JobArgs, *river.InsertOpts) (*rivertype.JobInsertResult, error)); ok {
		return rf(ctx, args, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, river.JobArgs, *river.InsertOpts) *rivertype.JobInsertResult); ok {
		r0 = rf(ctx, args, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivertype.JobInsertResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, river.JobArgs, *river.InsertOpts) error); ok {
		r1 = rf(ctx, args, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorker_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockWorker_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - args river.JobArgs
//   - opts *river.InsertOpts
func (_e *MockWorker_Expecter) Insert(ctx interface{}, args interface{}, opts interface{}) *MockWorker_Insert_Call {
	return &MockWorker_Insert_Call{Call: _e.mock.On("Insert", ctx, args, opts)}
}

func (_c *MockWorker_Insert_Call) Run(run func(ctx context.Context, args river.JobArgs, opts *river.InsertOpts)) *MockWorker_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(river.JobArgs), args[2].(*river.InsertOpts))
	})
	return _c
}

func (_c *MockWorker_Insert_Call) Return(_a0 *rivertype.JobInsertResult, _a1 error) *MockWorker_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorker_Insert_Call) RunAndReturn(run func(context.Context, river.JobArgs, *river.InsertOpts) (*rivertype.JobInsertResult, error)) *MockWorker_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Queues provides a mock function with no fields
func (_m *MockWorker) Queues() *river.QueueBundle {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Queues")
	}

	var r0 *river.QueueBundle
	if rf, ok := ret.Get(0).(func() *river.QueueBundle); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*river.QueueBundle)
		}
	}

	return r0
}

// MockWorker_Queues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queues'
type MockWorker_Queues_Call struct {
	*mock.Call
}

// Queues is a helper method to define mock.On call
func (_e *MockWorker_Expecter) Queues() *MockWorker_Queues_Call {
	return &MockWorker_Queues_Call{Call: _e.mock.On("Queues")}
}

func (_c *MockWorker_Queues_Call) Run(run func()) *MockWorker_Queues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorker_Queues_Call) Return(_a0 *river.QueueBundle) *MockWorker_Queues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorker_Queues_Call) RunAndReturn(run func() *river.QueueBundle) *MockWorker_Queues_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockWorker) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorker_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockWorker_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWorker_Expecter) Start(ctx interface{}) *MockWorker_Start_Call {
	return &MockWorker_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockWorker_Start_Call) Run(run func(ctx context.Context)) *MockWorker_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWorker_Start_Call) Return(_a0 error) *MockWorker_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorker_Start_Call) RunAndReturn(run func(context.Context) error) *MockWorker_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *MockWorker) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorker_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockWorker_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWorker_Expecter) Stop(ctx interface{}) *MockWorker_Stop_Call {
	return &MockWorker_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockWorker_Stop_Call) Run(run func(ctx context.Context)) *MockWorker_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWorker_Stop_Call) Return(_a0 error) *MockWorker_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorker_Stop_Call) RunAndReturn(run func(context.Context) error) *MockWorker_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// StopAndCancel provides a mock function with given fields: ctx
func (_m *MockWorker) StopAndCancel(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StopAndCancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorker_StopAndCancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopAndCancel'
type MockWorker_StopAndCancel_Call struct {
	*mock.Call
}

// StopAndCancel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWorker_Expecter) StopAndCancel(ctx interface{}) *MockWorker_StopAndCancel_Call {
	return &MockWorker_StopAndCancel_Call{Call: _e.mock.On("StopAndCancel", ctx)}
}

func (_c *MockWorker_StopAndCancel_Call) Run(run func(ctx context.Context)) *MockWorker_StopAndCancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWorker_StopAndCancel_Call) Return(_a0 error) *MockWorker_StopAndCancel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorker_StopAndCancel_Call) RunAndReturn(run func(context.Context) error) *MockWorker_StopAndCancel_Call {
	_c.Call.Return(run)
	return _c
}

// Stopped provides a mock function with no fields
func (_m *MockWorker) Stopped() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stopped")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockWorker_Stopped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stopped'
type MockWorker_Stopped_Call struct {
	*mock.Call
}

// Stopped is a helper method to define mock.On call
func (_e *MockWorker_Expecter) Stopped() *MockWorker_Stopped_Call {
	return &MockWorker_Stopped_Call{Call: _e.mock.On("Stopped")}
}

func (_c *MockWorker_Stopped_Call) Run(run func()) *MockWorker_Stopped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorker_Stopped_Call) Return(_a0 <-chan struct{}) *MockWorker_Stopped_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorker_Stopped_Call) RunAndReturn(run func() <-chan struct{}) *MockWorker_Stopped_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorker creates a new instance of MockWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorker {
	mock := &MockWorker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
