// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	model "autopilot/backends/api/internal/identity/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSessioner is an autogenerated mock type for the Sessioner type
type MockSessioner struct {
	mock.Mock
}

type MockSessioner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessioner) EXPECT() *MockSessioner_Expecter {
	return &MockSessioner_Expecter{mock: &_m.Mock}
}

// CleanUpExpired provides a mock function with given fields: ctx
func (_m *MockSessioner) CleanUpExpired(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CleanUpExpired")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessioner_CleanUpExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanUpExpired'
type MockSessioner_CleanUpExpired_Call struct {
	*mock.Call
}

// CleanUpExpired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSessioner_Expecter) CleanUpExpired(ctx interface{}) *MockSessioner_CleanUpExpired_Call {
	return &MockSessioner_CleanUpExpired_Call{Call: _e.mock.On("CleanUpExpired", ctx)}
}

func (_c *MockSessioner_CleanUpExpired_Call) Run(run func(ctx context.Context)) *MockSessioner_CleanUpExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSessioner_CleanUpExpired_Call) Return(_a0 error) *MockSessioner_CleanUpExpired_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessioner_CleanUpExpired_Call) RunAndReturn(run func(context.Context) error) *MockSessioner_CleanUpExpired_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, email, password
func (_m *MockSessioner) Create(ctx context.Context, email string, password string) (*model.Session, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Session, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Session); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessioner_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSessioner_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *MockSessioner_Expecter) Create(ctx interface{}, email interface{}, password interface{}) *MockSessioner_Create_Call {
	return &MockSessioner_Create_Call{Call: _e.mock.On("Create", ctx, email, password)}
}

func (_c *MockSessioner_Create_Call) Run(run func(ctx context.Context, email string, password string)) *MockSessioner_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSessioner_Create_Call) Return(_a0 *model.Session, _a1 error) *MockSessioner_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessioner_Create_Call) RunAndReturn(run func(context.Context, string, string) (*model.Session, error)) *MockSessioner_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function with given fields: ctx, token
func (_m *MockSessioner) GetByToken(ctx context.Context, token string) (*model.Session, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *model.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Session, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Session); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessioner_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type MockSessioner_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessioner_Expecter) GetByToken(ctx interface{}, token interface{}) *MockSessioner_GetByToken_Call {
	return &MockSessioner_GetByToken_Call{Call: _e.mock.On("GetByToken", ctx, token)}
}

func (_c *MockSessioner_GetByToken_Call) Run(run func(ctx context.Context, token string)) *MockSessioner_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessioner_GetByToken_Call) Return(_a0 *model.Session, _a1 error) *MockSessioner_GetByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessioner_GetByToken_Call) RunAndReturn(run func(context.Context, string) (*model.Session, error)) *MockSessioner_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTokenFull provides a mock function with given fields: ctx, token
func (_m *MockSessioner) GetByTokenFull(ctx context.Context, token string) (*model.Session, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByTokenFull")
	}

	var r0 *model.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Session, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Session); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessioner_GetByTokenFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTokenFull'
type MockSessioner_GetByTokenFull_Call struct {
	*mock.Call
}

// GetByTokenFull is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessioner_Expecter) GetByTokenFull(ctx interface{}, token interface{}) *MockSessioner_GetByTokenFull_Call {
	return &MockSessioner_GetByTokenFull_Call{Call: _e.mock.On("GetByTokenFull", ctx, token)}
}

func (_c *MockSessioner_GetByTokenFull_Call) Run(run func(ctx context.Context, token string)) *MockSessioner_GetByTokenFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessioner_GetByTokenFull_Call) Return(_a0 *model.Session, _a1 error) *MockSessioner_GetByTokenFull_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessioner_GetByTokenFull_Call) RunAndReturn(run func(context.Context, string) (*model.Session, error)) *MockSessioner_GetByTokenFull_Call {
	_c.Call.Return(run)
	return _c
}

// Invalidate provides a mock function with given fields: ctx, token
func (_m *MockSessioner) Invalidate(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Invalidate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessioner_Invalidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invalidate'
type MockSessioner_Invalidate_Call struct {
	*mock.Call
}

// Invalidate is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessioner_Expecter) Invalidate(ctx interface{}, token interface{}) *MockSessioner_Invalidate_Call {
	return &MockSessioner_Invalidate_Call{Call: _e.mock.On("Invalidate", ctx, token)}
}

func (_c *MockSessioner_Invalidate_Call) Run(run func(ctx context.Context, token string)) *MockSessioner_Invalidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessioner_Invalidate_Call) Return(_a0 error) *MockSessioner_Invalidate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessioner_Invalidate_Call) RunAndReturn(run func(context.Context, string) error) *MockSessioner_Invalidate_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateAllSessions provides a mock function with given fields: ctx, userID, token
func (_m *MockSessioner) InvalidateAllSessions(ctx context.Context, userID string, token string) error {
	ret := _m.Called(ctx, userID, token)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateAllSessions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessioner_InvalidateAllSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateAllSessions'
type MockSessioner_InvalidateAllSessions_Call struct {
	*mock.Call
}

// InvalidateAllSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - token string
func (_e *MockSessioner_Expecter) InvalidateAllSessions(ctx interface{}, userID interface{}, token interface{}) *MockSessioner_InvalidateAllSessions_Call {
	return &MockSessioner_InvalidateAllSessions_Call{Call: _e.mock.On("InvalidateAllSessions", ctx, userID, token)}
}

func (_c *MockSessioner_InvalidateAllSessions_Call) Run(run func(ctx context.Context, userID string, token string)) *MockSessioner_InvalidateAllSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSessioner_InvalidateAllSessions_Call) Return(_a0 error) *MockSessioner_InvalidateAllSessions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessioner_InvalidateAllSessions_Call) RunAndReturn(run func(context.Context, string, string) error) *MockSessioner_InvalidateAllSessions_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateByID provides a mock function with given fields: ctx, token, sessionID
func (_m *MockSessioner) InvalidateByID(ctx context.Context, token string, sessionID string) error {
	ret := _m.Called(ctx, token, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessioner_InvalidateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateByID'
type MockSessioner_InvalidateByID_Call struct {
	*mock.Call
}

// InvalidateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - sessionID string
func (_e *MockSessioner_Expecter) InvalidateByID(ctx interface{}, token interface{}, sessionID interface{}) *MockSessioner_InvalidateByID_Call {
	return &MockSessioner_InvalidateByID_Call{Call: _e.mock.On("InvalidateByID", ctx, token, sessionID)}
}

func (_c *MockSessioner_InvalidateByID_Call) Run(run func(ctx context.Context, token string, sessionID string)) *MockSessioner_InvalidateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSessioner_InvalidateByID_Call) Return(_a0 error) *MockSessioner_InvalidateByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessioner_InvalidateByID_Call) RunAndReturn(run func(context.Context, string, string) error) *MockSessioner_InvalidateByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByToken provides a mock function with given fields: ctx, userID
func (_m *MockSessioner) ListByToken(ctx context.Context, userID string) ([]*model.Session, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListByToken")
	}

	var r0 []*model.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Session, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Session); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessioner_ListByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByToken'
type MockSessioner_ListByToken_Call struct {
	*mock.Call
}

// ListByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockSessioner_Expecter) ListByToken(ctx interface{}, userID interface{}) *MockSessioner_ListByToken_Call {
	return &MockSessioner_ListByToken_Call{Call: _e.mock.On("ListByToken", ctx, userID)}
}

func (_c *MockSessioner_ListByToken_Call) Run(run func(ctx context.Context, userID string)) *MockSessioner_ListByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessioner_ListByToken_Call) Return(_a0 []*model.Session, _a1 error) *MockSessioner_ListByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessioner_ListByToken_Call) RunAndReturn(run func(context.Context, string) ([]*model.Session, error)) *MockSessioner_ListByToken_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx, refreshToken
func (_m *MockSessioner) Refresh(ctx context.Context, refreshToken string) (*model.Session, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *model.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Session, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Session); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessioner_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockSessioner_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockSessioner_Expecter) Refresh(ctx interface{}, refreshToken interface{}) *MockSessioner_Refresh_Call {
	return &MockSessioner_Refresh_Call{Call: _e.mock.On("Refresh", ctx, refreshToken)}
}

func (_c *MockSessioner_Refresh_Call) Run(run func(ctx context.Context, refreshToken string)) *MockSessioner_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessioner_Refresh_Call) Return(_a0 *model.Session, _a1 error) *MockSessioner_Refresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessioner_Refresh_Call) RunAndReturn(run func(context.Context, string) (*model.Session, error)) *MockSessioner_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTwoFactorStatus provides a mock function with given fields: ctx, token, isPending
func (_m *MockSessioner) UpdateTwoFactorStatus(ctx context.Context, token string, isPending bool) error {
	ret := _m.Called(ctx, token, isPending)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTwoFactorStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, token, isPending)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessioner_UpdateTwoFactorStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTwoFactorStatus'
type MockSessioner_UpdateTwoFactorStatus_Call struct {
	*mock.Call
}

// UpdateTwoFactorStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - isPending bool
func (_e *MockSessioner_Expecter) UpdateTwoFactorStatus(ctx interface{}, token interface{}, isPending interface{}) *MockSessioner_UpdateTwoFactorStatus_Call {
	return &MockSessioner_UpdateTwoFactorStatus_Call{Call: _e.mock.On("UpdateTwoFactorStatus", ctx, token, isPending)}
}

func (_c *MockSessioner_UpdateTwoFactorStatus_Call) Run(run func(ctx context.Context, token string, isPending bool)) *MockSessioner_UpdateTwoFactorStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockSessioner_UpdateTwoFactorStatus_Call) Return(_a0 error) *MockSessioner_UpdateTwoFactorStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessioner_UpdateTwoFactorStatus_Call) RunAndReturn(run func(context.Context, string, bool) error) *MockSessioner_UpdateTwoFactorStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: ctx, token
func (_m *MockSessioner) Validate(ctx context.Context, token string) (*model.Session, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 *model.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Session, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Session); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessioner_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockSessioner_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessioner_Expecter) Validate(ctx interface{}, token interface{}) *MockSessioner_Validate_Call {
	return &MockSessioner_Validate_Call{Call: _e.mock.On("Validate", ctx, token)}
}

func (_c *MockSessioner_Validate_Call) Run(run func(ctx context.Context, token string)) *MockSessioner_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessioner_Validate_Call) Return(_a0 *model.Session, _a1 error) *MockSessioner_Validate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessioner_Validate_Call) RunAndReturn(run func(context.Context, string) (*model.Session, error)) *MockSessioner_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessioner creates a new instance of MockSessioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessioner {
	mock := &MockSessioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
