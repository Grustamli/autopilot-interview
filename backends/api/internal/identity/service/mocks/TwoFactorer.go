// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	model "autopilot/backends/api/internal/identity/model"
	context "context"

	mock "github.com/stretchr/testify/mock"

	service "autopilot/backends/api/internal/identity/service"
)

// MockTwoFactorer is an autogenerated mock type for the TwoFactorer type
type MockTwoFactorer struct {
	mock.Mock
}

type MockTwoFactorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTwoFactorer) EXPECT() *MockTwoFactorer_Expecter {
	return &MockTwoFactorer_Expecter{mock: &_m.Mock}
}

// Disable provides a mock function with given fields: ctx, userID
func (_m *MockTwoFactorer) Disable(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Disable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTwoFactorer_Disable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable'
type MockTwoFactorer_Disable_Call struct {
	*mock.Call
}

// Disable is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTwoFactorer_Expecter) Disable(ctx interface{}, userID interface{}) *MockTwoFactorer_Disable_Call {
	return &MockTwoFactorer_Disable_Call{Call: _e.mock.On("Disable", ctx, userID)}
}

func (_c *MockTwoFactorer_Disable_Call) Run(run func(ctx context.Context, userID string)) *MockTwoFactorer_Disable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTwoFactorer_Disable_Call) Return(_a0 error) *MockTwoFactorer_Disable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwoFactorer_Disable_Call) RunAndReturn(run func(context.Context, string) error) *MockTwoFactorer_Disable_Call {
	_c.Call.Return(run)
	return _c
}

// Enable provides a mock function with given fields: ctx, userID, code
func (_m *MockTwoFactorer) Enable(ctx context.Context, userID string, code string) error {
	ret := _m.Called(ctx, userID, code)

	if len(ret) == 0 {
		panic("no return value specified for Enable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTwoFactorer_Enable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enable'
type MockTwoFactorer_Enable_Call struct {
	*mock.Call
}

// Enable is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - code string
func (_e *MockTwoFactorer_Expecter) Enable(ctx interface{}, userID interface{}, code interface{}) *MockTwoFactorer_Enable_Call {
	return &MockTwoFactorer_Enable_Call{Call: _e.mock.On("Enable", ctx, userID, code)}
}

func (_c *MockTwoFactorer_Enable_Call) Run(run func(ctx context.Context, userID string, code string)) *MockTwoFactorer_Enable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTwoFactorer_Enable_Call) Return(_a0 error) *MockTwoFactorer_Enable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwoFactorer_Enable_Call) RunAndReturn(run func(context.Context, string, string) error) *MockTwoFactorer_Enable_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *MockTwoFactorer) GetByUserID(ctx context.Context, userID string) (*model.TwoFactor, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 *model.TwoFactor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.TwoFactor, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.TwoFactor); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TwoFactor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwoFactorer_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockTwoFactorer_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTwoFactorer_Expecter) GetByUserID(ctx interface{}, userID interface{}) *MockTwoFactorer_GetByUserID_Call {
	return &MockTwoFactorer_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, userID)}
}

func (_c *MockTwoFactorer_GetByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockTwoFactorer_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTwoFactorer_GetByUserID_Call) Return(_a0 *model.TwoFactor, _a1 error) *MockTwoFactorer_GetByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwoFactorer_GetByUserID_Call) RunAndReturn(run func(context.Context, string) (*model.TwoFactor, error)) *MockTwoFactorer_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// RegenerateQRCode provides a mock function with given fields: ctx, userID
func (_m *MockTwoFactorer) RegenerateQRCode(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RegenerateQRCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwoFactorer_RegenerateQRCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegenerateQRCode'
type MockTwoFactorer_RegenerateQRCode_Call struct {
	*mock.Call
}

// RegenerateQRCode is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTwoFactorer_Expecter) RegenerateQRCode(ctx interface{}, userID interface{}) *MockTwoFactorer_RegenerateQRCode_Call {
	return &MockTwoFactorer_RegenerateQRCode_Call{Call: _e.mock.On("RegenerateQRCode", ctx, userID)}
}

func (_c *MockTwoFactorer_RegenerateQRCode_Call) Run(run func(ctx context.Context, userID string)) *MockTwoFactorer_RegenerateQRCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTwoFactorer_RegenerateQRCode_Call) Return(_a0 string, _a1 error) *MockTwoFactorer_RegenerateQRCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwoFactorer_RegenerateQRCode_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockTwoFactorer_RegenerateQRCode_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function with given fields: ctx, userID
func (_m *MockTwoFactorer) Setup(ctx context.Context, userID string) (*service.TwoFactorSetupData, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 *service.TwoFactorSetupData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*service.TwoFactorSetupData, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *service.TwoFactorSetupData); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TwoFactorSetupData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwoFactorer_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type MockTwoFactorer_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTwoFactorer_Expecter) Setup(ctx interface{}, userID interface{}) *MockTwoFactorer_Setup_Call {
	return &MockTwoFactorer_Setup_Call{Call: _e.mock.On("Setup", ctx, userID)}
}

func (_c *MockTwoFactorer_Setup_Call) Run(run func(ctx context.Context, userID string)) *MockTwoFactorer_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTwoFactorer_Setup_Call) Return(_a0 *service.TwoFactorSetupData, _a1 error) *MockTwoFactorer_Setup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwoFactorer_Setup_Call) RunAndReturn(run func(context.Context, string) (*service.TwoFactorSetupData, error)) *MockTwoFactorer_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: ctx, userID, code
func (_m *MockTwoFactorer) Verify(ctx context.Context, userID string, code string) error {
	ret := _m.Called(ctx, userID, code)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTwoFactorer_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockTwoFactorer_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - code string
func (_e *MockTwoFactorer_Expecter) Verify(ctx interface{}, userID interface{}, code interface{}) *MockTwoFactorer_Verify_Call {
	return &MockTwoFactorer_Verify_Call{Call: _e.mock.On("Verify", ctx, userID, code)}
}

func (_c *MockTwoFactorer_Verify_Call) Run(run func(ctx context.Context, userID string, code string)) *MockTwoFactorer_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTwoFactorer_Verify_Call) Return(_a0 error) *MockTwoFactorer_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwoFactorer_Verify_Call) RunAndReturn(run func(context.Context, string, string) error) *MockTwoFactorer_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTwoFactorer creates a new instance of MockTwoFactorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTwoFactorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTwoFactorer {
	mock := &MockTwoFactorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
