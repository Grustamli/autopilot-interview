// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	core "autopilot/backends/internal/core"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "autopilot/backends/api/internal/identity/model"

	store "autopilot/backends/api/internal/identity/store"
)

// MockTwoFactorer is an autogenerated mock type for the TwoFactorer type
type MockTwoFactorer struct {
	mock.Mock
}

type MockTwoFactorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTwoFactorer) EXPECT() *MockTwoFactorer_Expecter {
	return &MockTwoFactorer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, twoFactor
func (_m *MockTwoFactorer) Create(ctx context.Context, twoFactor *model.TwoFactor) (*model.TwoFactor, error) {
	ret := _m.Called(ctx, twoFactor)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.TwoFactor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TwoFactor) (*model.TwoFactor, error)); ok {
		return rf(ctx, twoFactor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.TwoFactor) *model.TwoFactor); ok {
		r0 = rf(ctx, twoFactor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TwoFactor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.TwoFactor) error); ok {
		r1 = rf(ctx, twoFactor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwoFactorer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTwoFactorer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - twoFactor *model.TwoFactor
func (_e *MockTwoFactorer_Expecter) Create(ctx interface{}, twoFactor interface{}) *MockTwoFactorer_Create_Call {
	return &MockTwoFactorer_Create_Call{Call: _e.mock.On("Create", ctx, twoFactor)}
}

func (_c *MockTwoFactorer_Create_Call) Run(run func(ctx context.Context, twoFactor *model.TwoFactor)) *MockTwoFactorer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.TwoFactor))
	})
	return _c
}

func (_c *MockTwoFactorer_Create_Call) Return(_a0 *model.TwoFactor, _a1 error) *MockTwoFactorer_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwoFactorer_Create_Call) RunAndReturn(run func(context.Context, *model.TwoFactor) (*model.TwoFactor, error)) *MockTwoFactorer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockTwoFactorer) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTwoFactorer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTwoFactorer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockTwoFactorer_Expecter) Delete(ctx interface{}, id interface{}) *MockTwoFactorer_Delete_Call {
	return &MockTwoFactorer_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockTwoFactorer_Delete_Call) Run(run func(ctx context.Context, id string)) *MockTwoFactorer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTwoFactorer_Delete_Call) Return(_a0 error) *MockTwoFactorer_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwoFactorer_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockTwoFactorer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockTwoFactorer) GetByID(ctx context.Context, id string) (*model.TwoFactor, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.TwoFactor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.TwoFactor, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.TwoFactor); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TwoFactor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwoFactorer_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTwoFactorer_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockTwoFactorer_Expecter) GetByID(ctx interface{}, id interface{}) *MockTwoFactorer_GetByID_Call {
	return &MockTwoFactorer_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockTwoFactorer_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockTwoFactorer_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTwoFactorer_GetByID_Call) Return(_a0 *model.TwoFactor, _a1 error) *MockTwoFactorer_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwoFactorer_GetByID_Call) RunAndReturn(run func(context.Context, string) (*model.TwoFactor, error)) *MockTwoFactorer_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *MockTwoFactorer) GetByUserID(ctx context.Context, userID string) (*model.TwoFactor, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 *model.TwoFactor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.TwoFactor, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.TwoFactor); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TwoFactor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwoFactorer_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockTwoFactorer_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTwoFactorer_Expecter) GetByUserID(ctx interface{}, userID interface{}) *MockTwoFactorer_GetByUserID_Call {
	return &MockTwoFactorer_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, userID)}
}

func (_c *MockTwoFactorer_GetByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockTwoFactorer_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTwoFactorer_GetByUserID_Call) Return(_a0 *model.TwoFactor, _a1 error) *MockTwoFactorer_GetByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwoFactorer_GetByUserID_Call) RunAndReturn(run func(context.Context, string) (*model.TwoFactor, error)) *MockTwoFactorer_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, twoFactor
func (_m *MockTwoFactorer) Update(ctx context.Context, twoFactor *model.TwoFactor) error {
	ret := _m.Called(ctx, twoFactor)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TwoFactor) error); ok {
		r0 = rf(ctx, twoFactor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTwoFactorer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTwoFactorer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - twoFactor *model.TwoFactor
func (_e *MockTwoFactorer_Expecter) Update(ctx interface{}, twoFactor interface{}) *MockTwoFactorer_Update_Call {
	return &MockTwoFactorer_Update_Call{Call: _e.mock.On("Update", ctx, twoFactor)}
}

func (_c *MockTwoFactorer_Update_Call) Run(run func(ctx context.Context, twoFactor *model.TwoFactor)) *MockTwoFactorer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.TwoFactor))
	})
	return _c
}

func (_c *MockTwoFactorer_Update_Call) Return(_a0 error) *MockTwoFactorer_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwoFactorer_Update_Call) RunAndReturn(run func(context.Context, *model.TwoFactor) error) *MockTwoFactorer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithQuerier provides a mock function with given fields: q
func (_m *MockTwoFactorer) WithQuerier(q core.Querier) store.TwoFactorer {
	ret := _m.Called(q)

	if len(ret) == 0 {
		panic("no return value specified for WithQuerier")
	}

	var r0 store.TwoFactorer
	if rf, ok := ret.Get(0).(func(core.Querier) store.TwoFactorer); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.TwoFactorer)
		}
	}

	return r0
}

// MockTwoFactorer_WithQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithQuerier'
type MockTwoFactorer_WithQuerier_Call struct {
	*mock.Call
}

// WithQuerier is a helper method to define mock.On call
//   - q core.Querier
func (_e *MockTwoFactorer_Expecter) WithQuerier(q interface{}) *MockTwoFactorer_WithQuerier_Call {
	return &MockTwoFactorer_WithQuerier_Call{Call: _e.mock.On("WithQuerier", q)}
}

func (_c *MockTwoFactorer_WithQuerier_Call) Run(run func(q core.Querier)) *MockTwoFactorer_WithQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.Querier))
	})
	return _c
}

func (_c *MockTwoFactorer_WithQuerier_Call) Return(_a0 store.TwoFactorer) *MockTwoFactorer_WithQuerier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwoFactorer_WithQuerier_Call) RunAndReturn(run func(core.Querier) store.TwoFactorer) *MockTwoFactorer_WithQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTwoFactorer creates a new instance of MockTwoFactorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTwoFactorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTwoFactorer {
	mock := &MockTwoFactorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
