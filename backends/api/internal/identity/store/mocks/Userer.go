// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	core "autopilot/backends/internal/core"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "autopilot/backends/api/internal/identity/model"

	store "autopilot/backends/api/internal/identity/store"
)

// MockUserer is an autogenerated mock type for the Userer type
type MockUserer struct {
	mock.Mock
}

type MockUserer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserer) EXPECT() *MockUserer_Expecter {
	return &MockUserer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user
func (_m *MockUserer) Create(ctx context.Context, user *model.User) (*model.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockUserer_Expecter) Create(ctx interface{}, user interface{}) *MockUserer_Create_Call {
	return &MockUserer_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUserer_Create_Call) Run(run func(ctx context.Context, user *model.User)) *MockUserer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *MockUserer_Create_Call) Return(_a0 *model.User, _a1 error) *MockUserer_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserer_Create_Call) RunAndReturn(run func(context.Context, *model.User) (*model.User, error)) *MockUserer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVerification provides a mock function with given fields: ctx, verification
func (_m *MockUserer) CreateVerification(ctx context.Context, verification *model.Verification) (*model.Verification, error) {
	ret := _m.Called(ctx, verification)

	if len(ret) == 0 {
		panic("no return value specified for CreateVerification")
	}

	var r0 *model.Verification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Verification) (*model.Verification, error)); ok {
		return rf(ctx, verification)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Verification) *model.Verification); ok {
		r0 = rf(ctx, verification)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Verification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Verification) error); ok {
		r1 = rf(ctx, verification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserer_CreateVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVerification'
type MockUserer_CreateVerification_Call struct {
	*mock.Call
}

// CreateVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - verification *model.Verification
func (_e *MockUserer_Expecter) CreateVerification(ctx interface{}, verification interface{}) *MockUserer_CreateVerification_Call {
	return &MockUserer_CreateVerification_Call{Call: _e.mock.On("CreateVerification", ctx, verification)}
}

func (_c *MockUserer_CreateVerification_Call) Run(run func(ctx context.Context, verification *model.Verification)) *MockUserer_CreateVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Verification))
	})
	return _c
}

func (_c *MockUserer_CreateVerification_Call) Return(_a0 *model.Verification, _a1 error) *MockUserer_CreateVerification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserer_CreateVerification_Call) RunAndReturn(run func(context.Context, *model.Verification) (*model.Verification, error)) *MockUserer_CreateVerification_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVerification provides a mock function with given fields: ctx, id
func (_m *MockUserer) DeleteVerification(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVerification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserer_DeleteVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVerification'
type MockUserer_DeleteVerification_Call struct {
	*mock.Call
}

// DeleteVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserer_Expecter) DeleteVerification(ctx interface{}, id interface{}) *MockUserer_DeleteVerification_Call {
	return &MockUserer_DeleteVerification_Call{Call: _e.mock.On("DeleteVerification", ctx, id)}
}

func (_c *MockUserer_DeleteVerification_Call) Run(run func(ctx context.Context, id string)) *MockUserer_DeleteVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserer_DeleteVerification_Call) Return(_a0 error) *MockUserer_DeleteVerification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserer_DeleteVerification_Call) RunAndReturn(run func(context.Context, string) error) *MockUserer_DeleteVerification_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserer) ExistsByEmail(ctx context.Context, email string) (bool, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByEmail")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserer_ExistsByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsByEmail'
type MockUserer_ExistsByEmail_Call struct {
	*mock.Call
}

// ExistsByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserer_Expecter) ExistsByEmail(ctx interface{}, email interface{}) *MockUserer_ExistsByEmail_Call {
	return &MockUserer_ExistsByEmail_Call{Call: _e.mock.On("ExistsByEmail", ctx, email)}
}

func (_c *MockUserer_ExistsByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserer_ExistsByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserer_ExistsByEmail_Call) Return(_a0 bool, _a1 error) *MockUserer_ExistsByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserer_ExistsByEmail_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockUserer_ExistsByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserer) GetByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserer_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserer_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserer_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUserer_GetByEmail_Call {
	return &MockUserer_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUserer_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserer_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserer_GetByEmail_Call) Return(_a0 *model.User, _a1 error) *MockUserer_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserer_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *MockUserer_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockUserer) GetByID(ctx context.Context, id string) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserer_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserer_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserer_Expecter) GetByID(ctx interface{}, id interface{}) *MockUserer_GetByID_Call {
	return &MockUserer_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockUserer_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockUserer_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserer_GetByID_Call) Return(_a0 *model.User, _a1 error) *MockUserer_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserer_GetByID_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *MockUserer_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetVerification provides a mock function with given fields: ctx, _a1, id
func (_m *MockUserer) GetVerification(ctx context.Context, _a1 string, id string) (*model.Verification, error) {
	ret := _m.Called(ctx, _a1, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVerification")
	}

	var r0 *model.Verification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Verification, error)); ok {
		return rf(ctx, _a1, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Verification); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Verification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, _a1, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserer_GetVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVerification'
type MockUserer_GetVerification_Call struct {
	*mock.Call
}

// GetVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - id string
func (_e *MockUserer_Expecter) GetVerification(ctx interface{}, _a1 interface{}, id interface{}) *MockUserer_GetVerification_Call {
	return &MockUserer_GetVerification_Call{Call: _e.mock.On("GetVerification", ctx, _a1, id)}
}

func (_c *MockUserer_GetVerification_Call) Run(run func(ctx context.Context, _a1 string, id string)) *MockUserer_GetVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserer_GetVerification_Call) Return(_a0 *model.Verification, _a1 error) *MockUserer_GetVerification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserer_GetVerification_Call) RunAndReturn(run func(context.Context, string, string) (*model.Verification, error)) *MockUserer_GetVerification_Call {
	_c.Call.Return(run)
	return _c
}

// GetVerificationByValue provides a mock function with given fields: ctx, _a1, value
func (_m *MockUserer) GetVerificationByValue(ctx context.Context, _a1 string, value string) (*model.Verification, error) {
	ret := _m.Called(ctx, _a1, value)

	if len(ret) == 0 {
		panic("no return value specified for GetVerificationByValue")
	}

	var r0 *model.Verification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Verification, error)); ok {
		return rf(ctx, _a1, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Verification); ok {
		r0 = rf(ctx, _a1, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Verification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, _a1, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserer_GetVerificationByValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVerificationByValue'
type MockUserer_GetVerificationByValue_Call struct {
	*mock.Call
}

// GetVerificationByValue is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - value string
func (_e *MockUserer_Expecter) GetVerificationByValue(ctx interface{}, _a1 interface{}, value interface{}) *MockUserer_GetVerificationByValue_Call {
	return &MockUserer_GetVerificationByValue_Call{Call: _e.mock.On("GetVerificationByValue", ctx, _a1, value)}
}

func (_c *MockUserer_GetVerificationByValue_Call) Run(run func(ctx context.Context, _a1 string, value string)) *MockUserer_GetVerificationByValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserer_GetVerificationByValue_Call) Return(_a0 *model.Verification, _a1 error) *MockUserer_GetVerificationByValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserer_GetVerificationByValue_Call) RunAndReturn(run func(context.Context, string, string) (*model.Verification, error)) *MockUserer_GetVerificationByValue_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, user
func (_m *MockUserer) Update(ctx context.Context, user *model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockUserer_Expecter) Update(ctx interface{}, user interface{}) *MockUserer_Update_Call {
	return &MockUserer_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *MockUserer_Update_Call) Run(run func(ctx context.Context, user *model.User)) *MockUserer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *MockUserer_Update_Call) Return(_a0 error) *MockUserer_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserer_Update_Call) RunAndReturn(run func(context.Context, *model.User) error) *MockUserer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithQuerier provides a mock function with given fields: q
func (_m *MockUserer) WithQuerier(q core.Querier) store.Userer {
	ret := _m.Called(q)

	if len(ret) == 0 {
		panic("no return value specified for WithQuerier")
	}

	var r0 store.Userer
	if rf, ok := ret.Get(0).(func(core.Querier) store.Userer); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Userer)
		}
	}

	return r0
}

// MockUserer_WithQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithQuerier'
type MockUserer_WithQuerier_Call struct {
	*mock.Call
}

// WithQuerier is a helper method to define mock.On call
//   - q core.Querier
func (_e *MockUserer_Expecter) WithQuerier(q interface{}) *MockUserer_WithQuerier_Call {
	return &MockUserer_WithQuerier_Call{Call: _e.mock.On("WithQuerier", q)}
}

func (_c *MockUserer_WithQuerier_Call) Run(run func(q core.Querier)) *MockUserer_WithQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.Querier))
	})
	return _c
}

func (_c *MockUserer_WithQuerier_Call) Return(_a0 store.Userer) *MockUserer_WithQuerier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserer_WithQuerier_Call) RunAndReturn(run func(core.Querier) store.Userer) *MockUserer_WithQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserer creates a new instance of MockUserer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserer {
	mock := &MockUserer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
