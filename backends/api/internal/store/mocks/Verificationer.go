// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "autopilot/backends/api/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// MockVerificationer is an autogenerated mock type for the Verificationer type
type MockVerificationer struct {
	mock.Mock
}

type MockVerificationer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerificationer) EXPECT() *MockVerificationer_Expecter {
	return &MockVerificationer_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id, tx
func (_m *MockVerificationer) Delete(ctx context.Context, id string, tx *sql.Tx) error {
	ret := _m.Called(ctx, id, tx)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *sql.Tx) error); ok {
		r0 = rf(ctx, id, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVerificationer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockVerificationer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - tx *sql.Tx
func (_e *MockVerificationer_Expecter) Delete(ctx interface{}, id interface{}, tx interface{}) *MockVerificationer_Delete_Call {
	return &MockVerificationer_Delete_Call{Call: _e.mock.On("Delete", ctx, id, tx)}
}

func (_c *MockVerificationer_Delete_Call) Run(run func(ctx context.Context, id string, tx *sql.Tx)) *MockVerificationer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*sql.Tx))
	})
	return _c
}

func (_c *MockVerificationer_Delete_Call) Return(_a0 error) *MockVerificationer_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerificationer_Delete_Call) RunAndReturn(run func(context.Context, string, *sql.Tx) error) *MockVerificationer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByValue provides a mock function with given fields: ctx, _a1, value
func (_m *MockVerificationer) GetByValue(ctx context.Context, _a1 string, value string) (*model.Verification, error) {
	ret := _m.Called(ctx, _a1, value)

	if len(ret) == 0 {
		panic("no return value specified for GetByValue")
	}

	var r0 *model.Verification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Verification, error)); ok {
		return rf(ctx, _a1, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Verification); ok {
		r0 = rf(ctx, _a1, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Verification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, _a1, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVerificationer_GetByValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByValue'
type MockVerificationer_GetByValue_Call struct {
	*mock.Call
}

// GetByValue is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - value string
func (_e *MockVerificationer_Expecter) GetByValue(ctx interface{}, _a1 interface{}, value interface{}) *MockVerificationer_GetByValue_Call {
	return &MockVerificationer_GetByValue_Call{Call: _e.mock.On("GetByValue", ctx, _a1, value)}
}

func (_c *MockVerificationer_GetByValue_Call) Run(run func(ctx context.Context, _a1 string, value string)) *MockVerificationer_GetByValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockVerificationer_GetByValue_Call) Return(_a0 *model.Verification, _a1 error) *MockVerificationer_GetByValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVerificationer_GetByValue_Call) RunAndReturn(run func(context.Context, string, string) (*model.Verification, error)) *MockVerificationer_GetByValue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerificationer creates a new instance of MockVerificationer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerificationer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerificationer {
	mock := &MockVerificationer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
