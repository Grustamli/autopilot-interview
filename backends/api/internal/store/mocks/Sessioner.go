// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "autopilot/backends/api/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSessioner is an autogenerated mock type for the Sessioner type
type MockSessioner struct {
	mock.Mock
}

type MockSessioner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessioner) EXPECT() *MockSessioner_Expecter {
	return &MockSessioner_Expecter{mock: &_m.Mock}
}

// CleanUpExpired provides a mock function with given fields: ctx
func (_m *MockSessioner) CleanUpExpired(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CleanUpExpired")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessioner_CleanUpExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanUpExpired'
type MockSessioner_CleanUpExpired_Call struct {
	*mock.Call
}

// CleanUpExpired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSessioner_Expecter) CleanUpExpired(ctx interface{}) *MockSessioner_CleanUpExpired_Call {
	return &MockSessioner_CleanUpExpired_Call{Call: _e.mock.On("CleanUpExpired", ctx)}
}

func (_c *MockSessioner_CleanUpExpired_Call) Run(run func(ctx context.Context)) *MockSessioner_CleanUpExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSessioner_CleanUpExpired_Call) Return(_a0 error) *MockSessioner_CleanUpExpired_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessioner_CleanUpExpired_Call) RunAndReturn(run func(context.Context) error) *MockSessioner_CleanUpExpired_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, session
func (_m *MockSessioner) Create(ctx context.Context, session *model.Session) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessioner_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSessioner_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - session *model.Session
func (_e *MockSessioner_Expecter) Create(ctx interface{}, session interface{}) *MockSessioner_Create_Call {
	return &MockSessioner_Create_Call{Call: _e.mock.On("Create", ctx, session)}
}

func (_c *MockSessioner_Create_Call) Run(run func(ctx context.Context, session *model.Session)) *MockSessioner_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Session))
	})
	return _c
}

func (_c *MockSessioner_Create_Call) Return(_a0 error) *MockSessioner_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessioner_Create_Call) RunAndReturn(run func(context.Context, *model.Session) error) *MockSessioner_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *MockSessioner) GetByRefreshToken(ctx context.Context, refreshToken string) (*model.Session, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for GetByRefreshToken")
	}

	var r0 *model.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Session, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Session); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessioner_GetByRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRefreshToken'
type MockSessioner_GetByRefreshToken_Call struct {
	*mock.Call
}

// GetByRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockSessioner_Expecter) GetByRefreshToken(ctx interface{}, refreshToken interface{}) *MockSessioner_GetByRefreshToken_Call {
	return &MockSessioner_GetByRefreshToken_Call{Call: _e.mock.On("GetByRefreshToken", ctx, refreshToken)}
}

func (_c *MockSessioner_GetByRefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *MockSessioner_GetByRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessioner_GetByRefreshToken_Call) Return(_a0 *model.Session, _a1 error) *MockSessioner_GetByRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessioner_GetByRefreshToken_Call) RunAndReturn(run func(context.Context, string) (*model.Session, error)) *MockSessioner_GetByRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function with given fields: ctx, token
func (_m *MockSessioner) GetByToken(ctx context.Context, token string) (*model.Session, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *model.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Session, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Session); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessioner_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type MockSessioner_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessioner_Expecter) GetByToken(ctx interface{}, token interface{}) *MockSessioner_GetByToken_Call {
	return &MockSessioner_GetByToken_Call{Call: _e.mock.On("GetByToken", ctx, token)}
}

func (_c *MockSessioner_GetByToken_Call) Run(run func(ctx context.Context, token string)) *MockSessioner_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessioner_GetByToken_Call) Return(_a0 *model.Session, _a1 error) *MockSessioner_GetByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessioner_GetByToken_Call) RunAndReturn(run func(context.Context, string) (*model.Session, error)) *MockSessioner_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateByToken provides a mock function with given fields: ctx, token
func (_m *MockSessioner) InvalidateByToken(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateByToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessioner_InvalidateByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateByToken'
type MockSessioner_InvalidateByToken_Call struct {
	*mock.Call
}

// InvalidateByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessioner_Expecter) InvalidateByToken(ctx interface{}, token interface{}) *MockSessioner_InvalidateByToken_Call {
	return &MockSessioner_InvalidateByToken_Call{Call: _e.mock.On("InvalidateByToken", ctx, token)}
}

func (_c *MockSessioner_InvalidateByToken_Call) Run(run func(ctx context.Context, token string)) *MockSessioner_InvalidateByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessioner_InvalidateByToken_Call) Return(_a0 error) *MockSessioner_InvalidateByToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessioner_InvalidateByToken_Call) RunAndReturn(run func(context.Context, string) error) *MockSessioner_InvalidateByToken_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateByUserID provides a mock function with given fields: ctx, userID
func (_m *MockSessioner) InvalidateByUserID(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessioner_InvalidateByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateByUserID'
type MockSessioner_InvalidateByUserID_Call struct {
	*mock.Call
}

// InvalidateByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockSessioner_Expecter) InvalidateByUserID(ctx interface{}, userID interface{}) *MockSessioner_InvalidateByUserID_Call {
	return &MockSessioner_InvalidateByUserID_Call{Call: _e.mock.On("InvalidateByUserID", ctx, userID)}
}

func (_c *MockSessioner_InvalidateByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockSessioner_InvalidateByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessioner_InvalidateByUserID_Call) Return(_a0 error) *MockSessioner_InvalidateByUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessioner_InvalidateByUserID_Call) RunAndReturn(run func(context.Context, string) error) *MockSessioner_InvalidateByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTwoFactorPending provides a mock function with given fields: ctx, token, isPending
func (_m *MockSessioner) UpdateTwoFactorPending(ctx context.Context, token string, isPending bool) error {
	ret := _m.Called(ctx, token, isPending)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTwoFactorPending")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, token, isPending)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessioner_UpdateTwoFactorPending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTwoFactorPending'
type MockSessioner_UpdateTwoFactorPending_Call struct {
	*mock.Call
}

// UpdateTwoFactorPending is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - isPending bool
func (_e *MockSessioner_Expecter) UpdateTwoFactorPending(ctx interface{}, token interface{}, isPending interface{}) *MockSessioner_UpdateTwoFactorPending_Call {
	return &MockSessioner_UpdateTwoFactorPending_Call{Call: _e.mock.On("UpdateTwoFactorPending", ctx, token, isPending)}
}

func (_c *MockSessioner_UpdateTwoFactorPending_Call) Run(run func(ctx context.Context, token string, isPending bool)) *MockSessioner_UpdateTwoFactorPending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockSessioner_UpdateTwoFactorPending_Call) Return(_a0 error) *MockSessioner_UpdateTwoFactorPending_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessioner_UpdateTwoFactorPending_Call) RunAndReturn(run func(context.Context, string, bool) error) *MockSessioner_UpdateTwoFactorPending_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessioner creates a new instance of MockSessioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessioner {
	mock := &MockSessioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
