// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	core "autopilot/backends/internal/core"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "autopilot/backends/api/internal/payment/model"

	store "autopilot/backends/api/internal/payment/store"
)

// MockPaymenter is an autogenerated mock type for the Paymenter type
type MockPaymenter struct {
	mock.Mock
}

type MockPaymenter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymenter) EXPECT() *MockPaymenter_Expecter {
	return &MockPaymenter_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, transaction
func (_m *MockPaymenter) Create(ctx context.Context, transaction *model.Payment) (*model.Payment, error) {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Payment) (*model.Payment, error)); ok {
		return rf(ctx, transaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Payment) *model.Payment); ok {
		r0 = rf(ctx, transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Payment) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymenter_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPaymenter_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *model.Payment
func (_e *MockPaymenter_Expecter) Create(ctx interface{}, transaction interface{}) *MockPaymenter_Create_Call {
	return &MockPaymenter_Create_Call{Call: _e.mock.On("Create", ctx, transaction)}
}

func (_c *MockPaymenter_Create_Call) Run(run func(ctx context.Context, transaction *model.Payment)) *MockPaymenter_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Payment))
	})
	return _c
}

func (_c *MockPaymenter_Create_Call) Return(_a0 *model.Payment, _a1 error) *MockPaymenter_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymenter_Create_Call) RunAndReturn(run func(context.Context, *model.Payment) (*model.Payment, error)) *MockPaymenter_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockPaymenter) Get(ctx context.Context, id string) (*model.Payment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Payment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Payment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymenter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPaymenter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockPaymenter_Expecter) Get(ctx interface{}, id interface{}) *MockPaymenter_Get_Call {
	return &MockPaymenter_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockPaymenter_Get_Call) Run(run func(ctx context.Context, id string)) *MockPaymenter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPaymenter_Get_Call) Return(_a0 *model.Payment, _a1 error) *MockPaymenter_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymenter_Get_Call) RunAndReturn(run func(context.Context, string) (*model.Payment, error)) *MockPaymenter_Get_Call {
	_c.Call.Return(run)
	return _c
}

// WithQuerier provides a mock function with given fields: _a0
func (_m *MockPaymenter) WithQuerier(_a0 core.Querier) store.Paymenter {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithQuerier")
	}

	var r0 store.Paymenter
	if rf, ok := ret.Get(0).(func(core.Querier) store.Paymenter); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Paymenter)
		}
	}

	return r0
}

// MockPaymenter_WithQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithQuerier'
type MockPaymenter_WithQuerier_Call struct {
	*mock.Call
}

// WithQuerier is a helper method to define mock.On call
//   - _a0 core.Querier
func (_e *MockPaymenter_Expecter) WithQuerier(_a0 interface{}) *MockPaymenter_WithQuerier_Call {
	return &MockPaymenter_WithQuerier_Call{Call: _e.mock.On("WithQuerier", _a0)}
}

func (_c *MockPaymenter_WithQuerier_Call) Run(run func(_a0 core.Querier)) *MockPaymenter_WithQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(core.Querier))
	})
	return _c
}

func (_c *MockPaymenter_WithQuerier_Call) Return(_a0 store.Paymenter) *MockPaymenter_WithQuerier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymenter_WithQuerier_Call) RunAndReturn(run func(core.Querier) store.Paymenter) *MockPaymenter_WithQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymenter creates a new instance of MockPaymenter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymenter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymenter {
	mock := &MockPaymenter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
