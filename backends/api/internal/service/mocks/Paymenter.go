// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	paymentv1 "autopilot/backends/internal/pbgen/payment/v1"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockPaymenter is an autogenerated mock type for the Paymenter type
type MockPaymenter struct {
	mock.Mock
}

type MockPaymenter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymenter) EXPECT() *MockPaymenter_Expecter {
	return &MockPaymenter_Expecter{mock: &_m.Mock}
}

// GetPayment provides a mock function with given fields: ctx, payment
func (_m *MockPaymenter) GetPayment(ctx context.Context, payment *paymentv1.GetPaymentRequest) (*paymentv1.Payment, error) {
	ret := _m.Called(ctx, payment)

	if len(ret) == 0 {
		panic("no return value specified for GetPayment")
	}

	var r0 *paymentv1.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *paymentv1.GetPaymentRequest) (*paymentv1.Payment, error)); ok {
		return rf(ctx, payment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *paymentv1.GetPaymentRequest) *paymentv1.Payment); ok {
		r0 = rf(ctx, payment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paymentv1.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *paymentv1.GetPaymentRequest) error); ok {
		r1 = rf(ctx, payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymenter_GetPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayment'
type MockPaymenter_GetPayment_Call struct {
	*mock.Call
}

// GetPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - payment *paymentv1.GetPaymentRequest
func (_e *MockPaymenter_Expecter) GetPayment(ctx interface{}, payment interface{}) *MockPaymenter_GetPayment_Call {
	return &MockPaymenter_GetPayment_Call{Call: _e.mock.On("GetPayment", ctx, payment)}
}

func (_c *MockPaymenter_GetPayment_Call) Run(run func(ctx context.Context, payment *paymentv1.GetPaymentRequest)) *MockPaymenter_GetPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*paymentv1.GetPaymentRequest))
	})
	return _c
}

func (_c *MockPaymenter_GetPayment_Call) Return(_a0 *paymentv1.Payment, _a1 error) *MockPaymenter_GetPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymenter_GetPayment_Call) RunAndReturn(run func(context.Context, *paymentv1.GetPaymentRequest) (*paymentv1.Payment, error)) *MockPaymenter_GetPayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymenter creates a new instance of MockPaymenter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymenter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymenter {
	mock := &MockPaymenter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
