// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	model "autopilot/backends/api/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"

	service "autopilot/backends/api/internal/service"
)

// MockUserer is an autogenerated mock type for the Userer type
type MockUserer struct {
	mock.Mock
}

type MockUserer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserer) EXPECT() *MockUserer_Expecter {
	return &MockUserer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user, password
func (_m *MockUserer) Create(ctx context.Context, user *model.User, password string) (*model.User, *service.Error) {
	ret := _m.Called(ctx, user, password)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.User
	var r1 *service.Error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, string) (*model.User, *service.Error)); ok {
		return rf(ctx, user, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, string) *model.User); ok {
		r0 = rf(ctx, user, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User, string) *service.Error); ok {
		r1 = rf(ctx, user, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*service.Error)
		}
	}

	return r0, r1
}

// MockUserer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
//   - password string
func (_e *MockUserer_Expecter) Create(ctx interface{}, user interface{}, password interface{}) *MockUserer_Create_Call {
	return &MockUserer_Create_Call{Call: _e.mock.On("Create", ctx, user, password)}
}

func (_c *MockUserer_Create_Call) Run(run func(ctx context.Context, user *model.User, password string)) *MockUserer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User), args[2].(string))
	})
	return _c
}

func (_c *MockUserer_Create_Call) Return(_a0 *model.User, _a1 *service.Error) *MockUserer_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserer_Create_Call) RunAndReturn(run func(context.Context, *model.User, string) (*model.User, *service.Error)) *MockUserer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockUserer) GetByID(ctx context.Context, id string) (*model.User, *service.Error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.User
	var r1 *service.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, *service.Error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *service.Error); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*service.Error)
		}
	}

	return r0, r1
}

// MockUserer_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserer_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserer_Expecter) GetByID(ctx interface{}, id interface{}) *MockUserer_GetByID_Call {
	return &MockUserer_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockUserer_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockUserer_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserer_GetByID_Call) Return(_a0 *model.User, _a1 *service.Error) *MockUserer_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserer_GetByID_Call) RunAndReturn(run func(context.Context, string) (*model.User, *service.Error)) *MockUserer_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// InitiatePasswordReset provides a mock function with given fields: ctx, email
func (_m *MockUserer) InitiatePasswordReset(ctx context.Context, email string) *service.Error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for InitiatePasswordReset")
	}

	var r0 *service.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) *service.Error); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Error)
		}
	}

	return r0
}

// MockUserer_InitiatePasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiatePasswordReset'
type MockUserer_InitiatePasswordReset_Call struct {
	*mock.Call
}

// InitiatePasswordReset is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserer_Expecter) InitiatePasswordReset(ctx interface{}, email interface{}) *MockUserer_InitiatePasswordReset_Call {
	return &MockUserer_InitiatePasswordReset_Call{Call: _e.mock.On("InitiatePasswordReset", ctx, email)}
}

func (_c *MockUserer_InitiatePasswordReset_Call) Run(run func(ctx context.Context, email string)) *MockUserer_InitiatePasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserer_InitiatePasswordReset_Call) Return(_a0 *service.Error) *MockUserer_InitiatePasswordReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserer_InitiatePasswordReset_Call) RunAndReturn(run func(context.Context, string) *service.Error) *MockUserer_InitiatePasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, token, newPassword
func (_m *MockUserer) ResetPassword(ctx context.Context, token string, newPassword string) *service.Error {
	ret := _m.Called(ctx, token, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 *service.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *service.Error); ok {
		r0 = rf(ctx, token, newPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Error)
		}
	}

	return r0
}

// MockUserer_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockUserer_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - newPassword string
func (_e *MockUserer_Expecter) ResetPassword(ctx interface{}, token interface{}, newPassword interface{}) *MockUserer_ResetPassword_Call {
	return &MockUserer_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, token, newPassword)}
}

func (_c *MockUserer_ResetPassword_Call) Run(run func(ctx context.Context, token string, newPassword string)) *MockUserer_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserer_ResetPassword_Call) Return(_a0 *service.Error) *MockUserer_ResetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserer_ResetPassword_Call) RunAndReturn(run func(context.Context, string, string) *service.Error) *MockUserer_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyEmail provides a mock function with given fields: ctx, token
func (_m *MockUserer) VerifyEmail(ctx context.Context, token string) *service.Error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 *service.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) *service.Error); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Error)
		}
	}

	return r0
}

// MockUserer_VerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEmail'
type MockUserer_VerifyEmail_Call struct {
	*mock.Call
}

// VerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockUserer_Expecter) VerifyEmail(ctx interface{}, token interface{}) *MockUserer_VerifyEmail_Call {
	return &MockUserer_VerifyEmail_Call{Call: _e.mock.On("VerifyEmail", ctx, token)}
}

func (_c *MockUserer_VerifyEmail_Call) Run(run func(ctx context.Context, token string)) *MockUserer_VerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserer_VerifyEmail_Call) Return(_a0 *service.Error) *MockUserer_VerifyEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserer_VerifyEmail_Call) RunAndReturn(run func(context.Context, string) *service.Error) *MockUserer_VerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserer creates a new instance of MockUserer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserer {
	mock := &MockUserer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
