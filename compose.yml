services:
  # Infrastructure
  cache:
    image: redis:7.4.1
    healthcheck:
      interval: 3s
      retries: 5
      test: ["CMD-SHELL", "redis-cli -a redis ping || exit 1"]
      timeout: 5s
    ports:
      - 6379:6379
    profiles:
      - infra
    restart: on-failure

  db:
    image: postgres:17.1
    command: >
      bash -c '
        create_db() {
          local db_name=$$1
          local suffix=$$2
          local full_name=$$db_name

          if [ ! -z "$$suffix" ]; then
            full_name="$${db_name}_$${suffix}"
          fi

          if ! psql -U postgres -lqt | cut -d "|" -f 1 | grep -qw $$full_name; then
            psql -U postgres -c "CREATE DATABASE $$full_name"
          fi
        }

        /usr/local/bin/docker-entrypoint.sh postgres &

        echo "Creating databases..." &&
          sleep 3 &&
          for db in api; do create_db $$db; done &&
          for db in payment; do create_db $$db "live"; create_db $$db "test"; done &&
          wait
      '
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      interval: 3s
      retries: 5
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      timeout: 5s
    ports:
      - 5432:5432
    profiles:
      - infra
    restart: on-failure

  db-ui:
    image: sosedoff/pgweb:0.16.2
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/api?sslmode=disable&search_path=public
    ports:
      - 8081:8081
    profiles:
      - infra
    restart: on-failure

  mailpit:
    image: axllent/mailpit:v1.18.6
    environment:
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    healthcheck:
      interval: 3s
      retries: 5
      test: ["CMD-SHELL", "nc -z 0.0.0.0 1025"]
      timeout: 5s
    ports:
      - 1025:1025
      - 8025:8025
    profiles:
      - infra
    restart: on-failure

  storage:
    image: minio/minio:RELEASE.2024-11-07T00-52-20Z
    command: minio server /data --console-address "0.0.0.0:9001"
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID:-}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY:-}
    healthcheck:
      interval: 3s
      retries: 5
      test: timeout 5s bash -c ':> /dev/tcp/0.0.0.0/9000' || exit 1
      timeout: 5s
    ports:
      - 9000:9000
      - 9001:9001
    profiles:
      - infra
    restart: on-failure

  # Apps/Services
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.spa
      args:
        - APP_SERVICE=dashboard
    ports:
      - 3000:80
    profiles:
      - app
    restart: on-failure

  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP_SERVICE=api
    command: /app start --worker
    environment:
      - LIVE_PRIMARY_WRITER_DB_URL=postgres://postgres:postgres@primary-writer:5432/api_live?sslmode=disable&search_path=public&pool_max_conns=25&pool_min_conns=2&pool_max_conn_lifetime=1h&pool_max_conn_idle_time=30m&pool_health_check_period=1m
      - TEST_PRIMARY_WRITER_DB_URL=postgres://postgres:postgres@primary-writer:5432/api_test?sslmode=disable&search_path=public&pool_max_conns=25&pool_min_conns=2&pool_max_conn_lifetime=1h&pool_max_conn_idle_time=30m&pool_health_check_period=1m
      - PAYMENT_SERVICE_ADDR=payment:3000
    ports:
      - 3001:3000
    profiles:
      - app
    restart: on-failure

  payment:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP_SERVICE=payment
    command: /app start --worker
    environment:
      - LIVE_PRIMARY_WRITER_DB_URL=postgres://postgres:postgres@primary-writer:5432/payment_live?sslmode=disable&search_path=public&pool_max_conns=25&pool_min_conns=2&pool_max_conn_lifetime=1h&pool_max_conn_idle_time=30m&pool_health_check_period=1m
      - TEST_PRIMARY_WRITER_DB_URL=postgres://postgres:postgres@primary-writer:5432/payment_test?sslmode=disable&search_path=public&pool_max_conns=25&pool_min_conns=2&pool_max_conn_lifetime=1h&pool_max_conn_idle_time=30m&pool_health_check_period=1m
    ports:
      - 3002:3000
    profiles:
      - app
    restart: on-failure
